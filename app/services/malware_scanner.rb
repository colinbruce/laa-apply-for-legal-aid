class MalwareScanner
  def self.call(**args)
    new(**args).call
  end

  LOCAL_COMMAND     = %w[clamdscan --fdpass --no-summary].freeze
  CONTAINER_COMMAND = %w[clamdscan -c config/clamd.container.conf --stream --no-summary].freeze

  def initialize(file_path:, uploader: nil, file_details: nil, save_result: true)
    @file_path    = file_path
    @uploader     = uploader
    @file_details = file_details
    @save_result  = save_result
  end

  def call
    result = MalwareScanResult.new(
      uploader: uploader,
      virus_found: virus_found?,
      scan_result: scan_result.result,
      scanner_working: scanner_down?,
      file_details: file_details
    )

    result.save! if save_result

    result
  end

  private

  attr_reader :file_path, :uploader, :file_details, :save_result

  def virus_found?
    @virus_found ||= !scan_result.status.success?
  end

  def scanner_down?
    scan_result.status.exitstatus != 2
  end

  def scan_result
    @scan_result ||= begin
      stdout, stderr, status = Open3.capture3(*(command + [file_path.to_s]))
      result = stdout.strip

      Raven.capture_message("ClamdscanError, #{stderr.presence || stdout}") if status.exitstatus == 2

      OpenStruct.new(
        result: result,
        status: status
      )
    end
  end

  def command
    ENV['LOCAL_CLAMAV'] == 'true' ? LOCAL_COMMAND : CONTAINER_COMMAND
  end
end
